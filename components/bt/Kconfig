menu Bluetooth


    config BT_ENABLED
        bool "Bluetooth"
        help
            Select this option to enable Bluetooth and show the submenu with Bluetooth configuration choices.

    menu "Bluetooth controller"
        visible if BT_ENABLED

        choice BTDM_CONTROLLER_MODE
            prompt "Bluetooth controller mode (BR/EDR/BLE/DUALMODE)"
            depends on BT_ENABLED
            help
                Specify the bluetooth controller mode (BR/EDR, BLE or dual mode).

            config BTDM_CONTROLLER_MODE_BLE_ONLY
                bool "BLE Only"

            config BTDM_CONTROLLER_MODE_BR_EDR_ONLY
                bool "BR/EDR Only"

            config BTDM_CONTROLLER_MODE_BTDM
                bool "Bluetooth Dual Mode"

        endchoice

        config BTDM_CONTROLLER_BLE_MAX_CONN
            int "BLE Max Connections"
            depends on BTDM_CONTROLLER_MODE_BLE_ONLY || BTDM_CONTROLLER_MODE_BTDM
            default 3
            range 1 9
            help
                BLE maximum connections of bluetooth controller.
                Each connection uses 1KB static DRAM whenever the BT controller is enabled.

        config BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN
            int "BR/EDR ACL Max Connections"
            depends on BTDM_CONTROLLER_MODE_BR_EDR_ONLY || BTDM_CONTROLLER_MODE_BTDM
            default 2
            range 1 7
            help
                BR/EDR ACL maximum connections of bluetooth controller.
                Each connection uses 1.2KB static DRAM whenever the BT controller is enabled.

        config BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN
            int "BR/EDR Sync(SCO/eSCO) Max Connections"
            depends on BTDM_CONTROLLER_MODE_BR_EDR_ONLY || BTDM_CONTROLLER_MODE_BTDM
            default 0
            range 0 3
            help
                BR/EDR Synchronize maximum connections of bluetooth controller.
                Each connection uses 2KB static DRAM whenever the BT controller is enabled.

        config BTDM_CONTROLLER_BLE_MAX_CONN_EFF
            int
            default BTDM_CONTROLLER_BLE_MAX_CONN if BTDM_CONTROLLER_MODE_BLE_ONLY || BTDM_CONTROLLER_MODE_BTDM
            default 0

        config BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN_EFF
            int
            default BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN if BTDM_CONTROLLER_MODE_BR_EDR_ONLY || BTDM_CONTROLLER_MODE_BTDM  # NOERROR
            default 0

        config BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN_EFF
            int
            default BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN if BTDM_CONTROLLER_MODE_BR_EDR_ONLY || BTDM_CONTROLLER_MODE_BTDM  # NOERROR
            default 0

        choice BTDM_CONTROLLER_PINNED_TO_CORE_CHOICE
            prompt "The cpu core which bluetooth controller run"
            depends on BT_ENABLED && !FREERTOS_UNICORE
            help
                Specify the cpu core to run bluetooth controller.
                Can not specify no-affinity.

            config BTDM_CONTROLLER_PINNED_TO_CORE_0
                bool "Core 0 (PRO CPU)"
            config BTDM_CONTROLLER_PINNED_TO_CORE_1
                bool "Core 1 (APP CPU)"
                depends on !FREERTOS_UNICORE
        endchoice

        config BTDM_CONTROLLER_PINNED_TO_CORE
            int
            default 0 if BTDM_CONTROLLER_PINNED_TO_CORE_0
            default 1 if BTDM_CONTROLLER_PINNED_TO_CORE_1
            default 0

        choice BTDM_CONTROLLER_HCI_MODE_CHOICE
            prompt "HCI mode"
            depends on BT_ENABLED
            help
                Speicify HCI mode as VHCI or UART(H4)

            config BTDM_CONTROLLER_HCI_MODE_VHCI
                bool "VHCI"
                help
                    Normal option. Mostly, choose this VHCI when bluetooth host run on ESP32, too.

            config BTDM_CONTROLLER_HCI_MODE_UART_H4
                bool "UART(H4)"
                help
                    If use external bluetooth host which run on other hardware and use UART as the HCI interface,
                    choose this option.
        endchoice

        menu "HCI UART(H4) Options"
            visible if BTDM_CONTROLLER_HCI_MODE_UART_H4

            config BT_HCI_UART_NO
                int "UART Number for HCI"
                depends on BTDM_CONTROLLER_HCI_MODE_UART_H4
                range 1 2
                default 1
                help
                    Uart number for HCI. The available uart is UART1 and UART2.

            config BT_HCI_UART_BAUDRATE
                int "UART Baudrate for HCI"
                depends on BTDM_CONTROLLER_HCI_MODE_UART_H4
                range 115200 921600
                default 921600
                help
                    UART Baudrate for HCI. Please use standard baudrate.

        endmenu

        menu "MODEM SLEEP Options"
            visible if BT_ENABLED

            config BTDM_CONTROLLER_MODEM_SLEEP
                bool "Bluetooth modem sleep"
                depends on BT_ENABLED
                default y
                help
                    Enable/disable bluetooth controller low power mode.

            choice BTDM_MODEM_SLEEP_MODE
                prompt "Bluetooth Modem sleep mode"
                depends on BTDM_CONTROLLER_MODEM_SLEEP
                help
                    To select which strategy to use for modem sleep

                config BTDM_MODEM_SLEEP_MODE_ORIG
                    bool "ORIG Mode(sleep with low power clock)"
                    help
                        ORIG mode is a bluetooth sleep mode that can be used for dual mode controller. In this mode,
                        bluetooth controller sleeps between BR/EDR frames and BLE events. A low power clock is used to
                        maintain bluetooth reference clock.

                config BTDM_MODEM_SLEEP_MODE_EVED
                    bool "EVED Mode(For internal test only)"
                    help
                        EVED mode is for BLE only and is only for internal test. Do not use it for production. this
                        mode is not compatible with DFS nor light sleep
            endchoice

            choice BTDM_LOW_POWER_CLOCK
                prompt "Bluetooth low power clock"
                depends on BTDM_MODEM_SLEEP_MODE_ORIG
                help
                    Select the low power clock source for bluetooth controller

                config BTDM_LPCLK_SEL_MAIN_XTAL
                    bool "Main crystal"
                    help
                        Main crystal can be used as low power clock for bluetooth modem sleep. If this option is
                        selected, bluetooth modem sleep can work under Dynamic Frequency Scaling(DFS) enabled, but
                        cannot work when light sleep is enabled. Main crystal has a relatively better performance than
                        other bluetooth low power clock sources.

                config BTDM_LPCLK_SEL_EXT_32K_XTAL
                    bool "External 32kHz crystal"
                    depends on ESP32_RTC_CLOCK_SOURCE_EXTERNAL_CRYSTAL
            endchoice

        endmenu

        config BLE_SCAN_DUPLICATE
            bool "BLE Scan Duplicate Options"
            depends on (BTDM_CONTROLLER_MODE_BTDM || BTDM_CONTROLLER_MODE_BLE_ONLY)
            default y
            help
                This select enables parameters setting of BLE scan duplicate.

        choice SCAN_DUPLICATE_TYPE
            prompt "Scan Duplicate Type"
            default SCAN_DUPLICATE_BY_DEVICE_ADDR
            depends on BLE_SCAN_DUPLICATE
            help
                Scan duplicate have three ways. one is "Scan Duplicate By Device Address", This way is to use
                advertiser address filtering. The adv packet of the same address is only allowed to be reported once.
                Another way is "Scan Duplicate By Device Address And Advertising Data". This way is to use advertising
                data and device address filtering. All different adv packets with the same address are allowed to be
                reported. The last way is "Scan Duplicate By Advertising Data". This way is to use advertising data
                filtering. All same advertising data only allow to be reported once even though they are from
                different devices.

            config SCAN_DUPLICATE_BY_DEVICE_ADDR
                bool "Scan Duplicate By Device Address"
                help
                    This way is to use advertiser address filtering. The adv packet of the same address is only
                    allowed to be reported once

            config SCAN_DUPLICATE_BY_ADV_DATA
                bool "Scan Duplicate By Advertising Data"
                help
                    This way is to use advertising data filtering. All same advertising data only allow to be reported
                    once even though they are from different devices.

            config SCAN_DUPLICATE_BY_ADV_DATA_AND_DEVICE_ADDR
                bool "Scan Duplicate By Device Address And Advertising Data"
                help
                    This way is to use advertising data and device address filtering. All different adv packets with
                    the same address are allowed to be reported.
        endchoice

        config SCAN_DUPLICATE_TYPE
            int
            depends on BLE_SCAN_DUPLICATE
            default 0 if SCAN_DUPLICATE_BY_DEVICE_ADDR
            default 1 if SCAN_DUPLICATE_BY_ADV_DATA
            default 2 if SCAN_DUPLICATE_BY_ADV_DATA_AND_DEVICE_ADDR
            default 0

        config DUPLICATE_SCAN_CACHE_SIZE
            int "Maximum number of devices in scan duplicate filter"
            depends on BLE_SCAN_DUPLICATE
            range 10 1000
            default 200
            help
                Maximum number of devices which can be recorded in scan duplicate filter.
                When the maximum amount of device in the filter is reached, the cache will be refreshed.

        config BLE_MESH_SCAN_DUPLICATE_EN
            bool "Special duplicate scan mechanism for BLE Mesh scan"
            depends on BLE_SCAN_DUPLICATE
            default n
            help
                This enables the BLE scan duplicate for special BLE Mesh scan.

        config MESH_DUPLICATE_SCAN_CACHE_SIZE
            int "Maximum number of Mesh adv packets in scan duplicate filter"
            depends on BLE_MESH_SCAN_DUPLICATE_EN
            range 10 1000
            default 200
            help
                Maximum number of adv packets which can be recorded in duplicate scan cache for BLE Mesh.
                When the maximum amount of device in the filter is reached, the cache will be refreshed.

        config BTDM_CONTROLLER_FULL_SCAN_SUPPORTED
            bool "BLE full scan feature supported"
            depends on BTDM_CONTROLLER_MODE_BLE_ONLY
            default n
            help
                The full scan function is mainly used to provide BLE scan performance.
                This is required for scenes with high scan performance requirements, such as BLE Mesh scenes.

        config BLE_ADV_REPORT_FLOW_CONTROL_SUPPORTED
            bool "BLE adv report flow control supported"
            depends on (BTDM_CONTROLLER_MODE_BTDM || BTDM_CONTROLLER_MODE_BLE_ONLY)
            default y
            help
                The function is mainly used to enable flow control for advertising reports. When it is enabled,
                advertising reports will be discarded by the controller if the number of unprocessed advertising
                reports exceeds the size of BLE adv report flow control.

        config BLE_ADV_REPORT_FLOW_CONTROL_NUM
            int "BLE adv report flow control number"
            depends on BLE_ADV_REPORT_FLOW_CONTROL_SUPPORTED
            range 50 1000
            default 100
            help
                The number of unprocessed advertising report that Bluedroid can save.If you set
                `BLE_ADV_REPORT_FLOW_CONTROL_NUM` to a small value, this may cause adv packets lost.
                If you set `BLE_ADV_REPORT_FLOW_CONTROL_NUM` to a large value, Bluedroid may cache a
                lot of adv packets and this may cause system memory run out. For example, if you set
                it to 50, the maximum memory consumed by host is 35 * 50 bytes. Please set
                `BLE_ADV_REPORT_FLOW_CONTROL_NUM` according to your system free memory and handle adv
                packets as fast as possible, otherwise it will cause adv packets lost.

        config BLE_ADV_REPORT_DISCARD_THRSHOLD
            int "BLE adv lost event threshold value"
            depends on BLE_ADV_REPORT_FLOW_CONTROL_SUPPORTED
            range 1 1000
            default 20
            help
                When adv report flow control is enabled, The ADV lost event will be generated when the number
                of ADV packets lost in the controller reaches this threshold. It is better to set a larger value.
                If you set `BLE_ADV_REPORT_DISCARD_THRSHOLD` to a small value or printf every adv lost event, it
                may cause adv packets lost more.

    endmenu

    menuconfig BLUEDROID_ENABLED
        bool "Bluedroid Enable"
        depends on BTDM_CONTROLLER_HCI_MODE_VHCI
        default y
        help
            This enables the default Bluedroid Bluetooth stack

    choice BLUEDROID_PINNED_TO_CORE_CHOICE
        prompt "The cpu core which Bluedroid run"
        depends on BLUEDROID_ENABLED && !FREERTOS_UNICORE
        help
            Which the cpu core to run Bluedroid. Can choose core0 and core1.
            Can not specify no-affinity.

        config BLUEDROID_PINNED_TO_CORE_0
            bool "Core 0 (PRO CPU)"
        config BLUEDROID_PINNED_TO_CORE_1
            bool "Core 1 (APP CPU)"
            depends on !FREERTOS_UNICORE
    endchoice

    config BLUEDROID_PINNED_TO_CORE
        int
        depends on BLUEDROID_ENABLED
        default 0 if BLUEDROID_PINNED_TO_CORE_0
        default 1 if BLUEDROID_PINNED_TO_CORE_1
        default 0

    config BTC_TASK_STACK_SIZE
        int "Bluetooth event (callback to application) task stack size"
        depends on BLUEDROID_ENABLED
        default 3072
        help
            This select btc task stack size

    config BTU_TASK_STACK_SIZE
        int "Bluetooth Bluedroid Host Stack task stack size"
        depends on BLUEDROID_ENABLED
        default 4096
        help
            This select btu task stack size

    config BLUEDROID_MEM_DEBUG
        bool "Bluedroid memory debug"
        depends on BLUEDROID_ENABLED
        default n
        help
            Bluedroid memory debug

    config CLASSIC_BT_ENABLED
        bool "Classic Bluetooth"
        depends on BLUEDROID_ENABLED
        default n
        help
            For now this option needs "SMP_ENABLE" to be set to yes

    config A2DP_ENABLE
        bool "A2DP"
        depends on CLASSIC_BT_ENABLED
        default n
        help
            Advanced Audio Distrubution Profile

    config A2DP_SINK_TASK_STACK_SIZE
        int "A2DP sink (audio stream decoding) task stack size"
        depends on A2DP_ENABLE
        default 2048

    config A2DP_SOURCE_TASK_STACK_SIZE
        int "A2DP source (audio stream encoding) task stack size"
        depends on A2DP_ENABLE
        default 2048

    config BT_SPP_ENABLED
        bool "SPP"
        depends on CLASSIC_BT_ENABLED
        default n
        help
            This enables the Serial Port Profile

    config HFP_ENABLE
        bool "Hands Free/Handset Profile"
        depends on CLASSIC_BT_ENABLED
        default n

    choice HFP_ROLE
        prompt "Hands-free Profile Role configuration"
        depends on HFP_ENABLE

        config HFP_CLIENT_ENABLE
            bool "Hands Free Unit"
    endchoice

    choice HFP_AUDIO_DATA_PATH
        prompt "audio(SCO) data path"
        depends on HFP_ENABLE

        config HFP_AUDIO_DATA_PATH_PCM
            bool "PCM"
            help
                This enables the Serial Port Profile
        config HFP_AUDIO_DATA_PATH_HCI
            bool "HCI"
            help
                This enables the Serial Port Profile
    endchoice

    config BT_SSP_ENABLED
        bool "Secure Simple Pairing"
        depends on CLASSIC_BT_ENABLED
        default y
        help
            This enables the Secure Simple Pairing. If disable this option, Bluedroid will only support Legacy Pairing

    config GATTS_ENABLE
        bool "Include GATT server module(GATTS)"
        depends on BLUEDROID_ENABLED && (BTDM_CONTROLLER_MODE_BTDM || BTDM_CONTROLLER_MODE_BLE_ONLY)
        default y
        help
            This option can be disabled when the app work only on gatt client mode

    choice GATTS_SEND_SERVICE_CHANGE_MODE
        prompt "GATTS Service Change Mode"
        default GATTS_SEND_SERVICE_CHANGE_AUTO
        depends on GATTS_ENABLE
        help
            Service change indication mode for GATT Server.

        config GATTS_SEND_SERVICE_CHANGE_MANUAL
            bool "GATTS manually send service change indication"
            help
                Manually send service change indication through API esp_ble_gatts_send_service_change_indication()

        config GATTS_SEND_SERVICE_CHANGE_AUTO
            bool "GATTS automatically send service change indication"
            help
                Let Bluedroid handle the service change indication internally

    endchoice

    config GATTS_SEND_SERVICE_CHANGE_MODE
        int
        depends on GATTS_ENABLE
        default 0 if GATTS_SEND_SERVICE_CHANGE_AUTO
        default 1 if GATTS_SEND_SERVICE_CHANGE_MANUAL
        default 0

    config GATTC_ENABLE
        bool "Include GATT client module(GATTC)"
        depends on BLUEDROID_ENABLED && (BTDM_CONTROLLER_MODE_BTDM || BTDM_CONTROLLER_MODE_BLE_ONLY)
        default y
        help
            This option can be close when the app work only on gatt server mode

    config GATTC_CACHE_NVS_FLASH
        bool "Save gattc cache data to nvs flash"
        depends on GATTC_ENABLE && (BTDM_CONTROLLER_MODE_BTDM || BTDM_CONTROLLER_MODE_BLE_ONLY)
        default n
        help
            This select can save gattc cache data to nvs flash

    config BLE_SMP_ENABLE
        bool "Include BLE security module(SMP)"
        depends on BLUEDROID_ENABLED && (BTDM_CONTROLLER_MODE_BTDM || BTDM_CONTROLLER_MODE_BLE_ONLY)
        default y
        help
            This option can be close when the app not used the ble security connect.

    config SMP_SLAVE_CON_PARAMS_UPD_ENABLE
        bool "Slave enable connection parameters update during pairing"
        depends on BLE_SMP_ENABLE
        default n
        help
            In order to reduce the pairing time, slave actively initiates connection parameters update during pairing.

    config BT_STACK_NO_LOG
        bool "Disable BT debug logs (minimize bin size)"
        depends on BLUEDROID_ENABLED
        default n
        help
            This select can save the rodata code size

    menu "BT DEBUG LOG LEVEL"
        depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG

        choice HCI_INITIAL_TRACE_LEVEL
            prompt "HCI layer"
            default HCI_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for HCI layer

            config HCI_TRACE_LEVEL_NONE
                bool "NONE"
            config HCI_TRACE_LEVEL_ERROR
                bool "ERROR"
            config HCI_TRACE_LEVEL_WARNING
                bool "WARNING"
            config HCI_TRACE_LEVEL_API
                bool "API"
            config HCI_TRACE_LEVEL_EVENT
                bool "EVENT"
            config HCI_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config HCI_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config HCI_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if HCI_TRACE_LEVEL_NONE
            default 1 if HCI_TRACE_LEVEL_ERROR
            default 2 if HCI_TRACE_LEVEL_WARNING
            default 3 if HCI_TRACE_LEVEL_API
            default 4 if HCI_TRACE_LEVEL_EVENT
            default 5 if HCI_TRACE_LEVEL_DEBUG
            default 6 if HCI_TRACE_LEVEL_VERBOSE
            default 2

        choice BTM_INITIAL_TRACE_LEVEL
            prompt "BTM layer"
            default BTM_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for BTM layer

            config BTM_TRACE_LEVEL_NONE
                bool "NONE"
            config BTM_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BTM_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BTM_TRACE_LEVEL_API
                bool "API"
            config BTM_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BTM_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BTM_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BTM_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if BTM_TRACE_LEVEL_NONE
            default 1 if BTM_TRACE_LEVEL_ERROR
            default 2 if BTM_TRACE_LEVEL_WARNING
            default 3 if BTM_TRACE_LEVEL_API
            default 4 if BTM_TRACE_LEVEL_EVENT
            default 5 if BTM_TRACE_LEVEL_DEBUG
            default 6 if BTM_TRACE_LEVEL_VERBOSE
            default 2

        choice L2CAP_INITIAL_TRACE_LEVEL
            prompt "L2CAP layer"
            default L2CAP_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for L2CAP layer

            config L2CAP_TRACE_LEVEL_NONE
                bool "NONE"
            config L2CAP_TRACE_LEVEL_ERROR
                bool "ERROR"
            config L2CAP_TRACE_LEVEL_WARNING
                bool "WARNING"
            config L2CAP_TRACE_LEVEL_API
                bool "API"
            config L2CAP_TRACE_LEVEL_EVENT
                bool "EVENT"
            config L2CAP_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config L2CAP_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config L2CAP_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if L2CAP_TRACE_LEVEL_NONE
            default 1 if L2CAP_TRACE_LEVEL_ERROR
            default 2 if L2CAP_TRACE_LEVEL_WARNING
            default 3 if L2CAP_TRACE_LEVEL_API
            default 4 if L2CAP_TRACE_LEVEL_EVENT
            default 5 if L2CAP_TRACE_LEVEL_DEBUG
            default 6 if L2CAP_TRACE_LEVEL_VERBOSE
            default 2

        choice RFCOMM_INITIAL_TRACE_LEVEL
            prompt "RFCOMM layer"
            default RFCOMM_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for RFCOMM layer

            config RFCOMM_TRACE_LEVEL_NONE
                bool "NONE"
            config RFCOMM_TRACE_LEVEL_ERROR
                bool "ERROR"
            config RFCOMM_TRACE_LEVEL_WARNING
                bool "WARNING"
            config RFCOMM_TRACE_LEVEL_API
                bool "API"
            config RFCOMM_TRACE_LEVEL_EVENT
                bool "EVENT"
            config RFCOMM_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config RFCOMM_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config RFCOMM_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if RFCOMM_TRACE_LEVEL_NONE
            default 1 if RFCOMM_TRACE_LEVEL_ERROR
            default 2 if RFCOMM_TRACE_LEVEL_WARNING
            default 3 if RFCOMM_TRACE_LEVEL_API
            default 4 if RFCOMM_TRACE_LEVEL_EVENT
            default 5 if RFCOMM_TRACE_LEVEL_DEBUG
            default 6 if RFCOMM_TRACE_LEVEL_VERBOSE
            default 2

        choice SDP_INITIAL_TRACE_LEVEL
            prompt "SDP layer"
            default SDP_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for SDP layer

            config SDP_TRACE_LEVEL_NONE
                bool "NONE"
            config SDP_TRACE_LEVEL_ERROR
                bool "ERROR"
            config SDP_TRACE_LEVEL_WARNING
                bool "WARNING"
            config SDP_TRACE_LEVEL_API
                bool "API"
            config SDP_TRACE_LEVEL_EVENT
                bool "EVENT"
            config SDP_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config SDP_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config SDP_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if SDP_TRACE_LEVEL_NONE
            default 1 if SDP_TRACE_LEVEL_ERROR
            default 2 if SDP_TRACE_LEVEL_WARNING
            default 3 if SDP_TRACE_LEVEL_API
            default 4 if SDP_TRACE_LEVEL_EVENT
            default 5 if SDP_TRACE_LEVEL_DEBUG
            default 6 if SDP_TRACE_LEVEL_VERBOSE
            default 2

        choice GAP_INITIAL_TRACE_LEVEL
            prompt "GAP layer"
            default GAP_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for GAP layer

            config GAP_TRACE_LEVEL_NONE
                bool "NONE"
            config GAP_TRACE_LEVEL_ERROR
                bool "ERROR"
            config GAP_TRACE_LEVEL_WARNING
                bool "WARNING"
            config GAP_TRACE_LEVEL_API
                bool "API"
            config GAP_TRACE_LEVEL_EVENT
                bool "EVENT"
            config GAP_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config GAP_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config GAP_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if GAP_TRACE_LEVEL_NONE
            default 1 if GAP_TRACE_LEVEL_ERROR
            default 2 if GAP_TRACE_LEVEL_WARNING
            default 3 if GAP_TRACE_LEVEL_API
            default 4 if GAP_TRACE_LEVEL_EVENT
            default 5 if GAP_TRACE_LEVEL_DEBUG
            default 6 if GAP_TRACE_LEVEL_VERBOSE
            default 2

        choice BNEP_INITIAL_TRACE_LEVEL
            prompt "BNEP layer"
            default BNEP_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for BNEP layer

            config BNEP_TRACE_LEVEL_NONE
                bool "NONE"
            config BNEP_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BNEP_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BNEP_TRACE_LEVEL_API
                bool "API"
            config BNEP_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BNEP_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BNEP_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BNEP_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if BNEP_TRACE_LEVEL_NONE
            default 1 if BNEP_TRACE_LEVEL_ERROR
            default 2 if BNEP_TRACE_LEVEL_WARNING
            default 3 if BNEP_TRACE_LEVEL_API
            default 4 if BNEP_TRACE_LEVEL_EVENT
            default 5 if BNEP_TRACE_LEVEL_DEBUG
            default 6 if BNEP_TRACE_LEVEL_VERBOSE
            default 2

        choice PAN_INITIAL_TRACE_LEVEL
            prompt "PAN layer"
            default PAN_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for PAN layer

            config PAN_TRACE_LEVEL_NONE
                bool "NONE"
            config PAN_TRACE_LEVEL_ERROR
                bool "ERROR"
            config PAN_TRACE_LEVEL_WARNING
                bool "WARNING"
            config PAN_TRACE_LEVEL_API
                bool "API"
            config PAN_TRACE_LEVEL_EVENT
                bool "EVENT"
            config PAN_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config PAN_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config PAN_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if PAN_TRACE_LEVEL_NONE
            default 1 if PAN_TRACE_LEVEL_ERROR
            default 2 if PAN_TRACE_LEVEL_WARNING
            default 3 if PAN_TRACE_LEVEL_API
            default 4 if PAN_TRACE_LEVEL_EVENT
            default 5 if PAN_TRACE_LEVEL_DEBUG
            default 6 if PAN_TRACE_LEVEL_VERBOSE
            default 2

        choice A2D_INITIAL_TRACE_LEVEL
            prompt "A2D layer"
            default A2D_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for A2D layer

            config A2D_TRACE_LEVEL_NONE
                bool "NONE"
            config A2D_TRACE_LEVEL_ERROR
                bool "ERROR"
            config A2D_TRACE_LEVEL_WARNING
                bool "WARNING"
            config A2D_TRACE_LEVEL_API
                bool "API"
            config A2D_TRACE_LEVEL_EVENT
                bool "EVENT"
            config A2D_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config A2D_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config A2D_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if A2D_TRACE_LEVEL_NONE
            default 1 if A2D_TRACE_LEVEL_ERROR
            default 2 if A2D_TRACE_LEVEL_WARNING
            default 3 if A2D_TRACE_LEVEL_API
            default 4 if A2D_TRACE_LEVEL_EVENT
            default 5 if A2D_TRACE_LEVEL_DEBUG
            default 6 if A2D_TRACE_LEVEL_VERBOSE
            default 2

        choice AVDT_INITIAL_TRACE_LEVEL
            prompt "AVDT layer"
            default AVDT_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for AVDT layer

            config AVDT_TRACE_LEVEL_NONE
                bool "NONE"
            config AVDT_TRACE_LEVEL_ERROR
                bool "ERROR"
            config AVDT_TRACE_LEVEL_WARNING
                bool "WARNING"
            config AVDT_TRACE_LEVEL_API
                bool "API"
            config AVDT_TRACE_LEVEL_EVENT
                bool "EVENT"
            config AVDT_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config AVDT_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config AVDT_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if AVDT_TRACE_LEVEL_NONE
            default 1 if AVDT_TRACE_LEVEL_ERROR
            default 2 if AVDT_TRACE_LEVEL_WARNING
            default 3 if AVDT_TRACE_LEVEL_API
            default 4 if AVDT_TRACE_LEVEL_EVENT
            default 5 if AVDT_TRACE_LEVEL_DEBUG
            default 6 if AVDT_TRACE_LEVEL_VERBOSE
            default 2

        choice AVCT_INITIAL_TRACE_LEVEL
            prompt "AVCT layer"
            default AVCT_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for AVCT layer

            config AVCT_TRACE_LEVEL_NONE
                bool "NONE"
            config AVCT_TRACE_LEVEL_ERROR
                bool "ERROR"
            config AVCT_TRACE_LEVEL_WARNING
                bool "WARNING"
            config AVCT_TRACE_LEVEL_API
                bool "API"
            config AVCT_TRACE_LEVEL_EVENT
                bool "EVENT"
            config AVCT_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config AVCT_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config AVCT_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if AVCT_TRACE_LEVEL_NONE
            default 1 if AVCT_TRACE_LEVEL_ERROR
            default 2 if AVCT_TRACE_LEVEL_WARNING
            default 3 if AVCT_TRACE_LEVEL_API
            default 4 if AVCT_TRACE_LEVEL_EVENT
            default 5 if AVCT_TRACE_LEVEL_DEBUG
            default 6 if AVCT_TRACE_LEVEL_VERBOSE
            default 2

        choice AVRC_INITIAL_TRACE_LEVEL
            prompt "AVRC layer"
            default AVRC_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for AVRC layer

            config AVRC_TRACE_LEVEL_NONE
                bool "NONE"
            config AVRC_TRACE_LEVEL_ERROR
                bool "ERROR"
            config AVRC_TRACE_LEVEL_WARNING
                bool "WARNING"
            config AVRC_TRACE_LEVEL_API
                bool "API"
            config AVRC_TRACE_LEVEL_EVENT
                bool "EVENT"
            config AVRC_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config AVRC_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config AVRC_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if AVRC_TRACE_LEVEL_NONE
            default 1 if AVRC_TRACE_LEVEL_ERROR
            default 2 if AVRC_TRACE_LEVEL_WARNING
            default 3 if AVRC_TRACE_LEVEL_API
            default 4 if AVRC_TRACE_LEVEL_EVENT
            default 5 if AVRC_TRACE_LEVEL_DEBUG
            default 6 if AVRC_TRACE_LEVEL_VERBOSE
            default 2

        choice MCA_INITIAL_TRACE_LEVEL
            prompt "MCA layer"
            default MCA_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for MCA layer

            config MCA_TRACE_LEVEL_NONE
                bool "NONE"
            config MCA_TRACE_LEVEL_ERROR
                bool "ERROR"
            config MCA_TRACE_LEVEL_WARNING
                bool "WARNING"
            config MCA_TRACE_LEVEL_API
                bool "API"
            config MCA_TRACE_LEVEL_EVENT
                bool "EVENT"
            config MCA_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config MCA_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config MCA_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if MCA_TRACE_LEVEL_NONE
            default 1 if MCA_TRACE_LEVEL_ERROR
            default 2 if MCA_TRACE_LEVEL_WARNING
            default 3 if MCA_TRACE_LEVEL_API
            default 4 if MCA_TRACE_LEVEL_EVENT
            default 5 if MCA_TRACE_LEVEL_DEBUG
            default 6 if MCA_TRACE_LEVEL_VERBOSE
            default 2

        choice HID_INITIAL_TRACE_LEVEL
            prompt "HID layer"
            default HID_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for HID layer

            config HID_TRACE_LEVEL_NONE
                bool "NONE"
            config HID_TRACE_LEVEL_ERROR
                bool "ERROR"
            config HID_TRACE_LEVEL_WARNING
                bool "WARNING"
            config HID_TRACE_LEVEL_API
                bool "API"
            config HID_TRACE_LEVEL_EVENT
                bool "EVENT"
            config HID_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config HID_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config HID_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if HID_TRACE_LEVEL_NONE
            default 1 if HID_TRACE_LEVEL_ERROR
            default 2 if HID_TRACE_LEVEL_WARNING
            default 3 if HID_TRACE_LEVEL_API
            default 4 if HID_TRACE_LEVEL_EVENT
            default 5 if HID_TRACE_LEVEL_DEBUG
            default 6 if HID_TRACE_LEVEL_VERBOSE
            default 2

        choice APPL_INITIAL_TRACE_LEVEL
            prompt "APPL layer"
            default APPL_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for APPL layer

            config APPL_TRACE_LEVEL_NONE
                bool "NONE"
            config APPL_TRACE_LEVEL_ERROR
                bool "ERROR"
            config APPL_TRACE_LEVEL_WARNING
                bool "WARNING"
            config APPL_TRACE_LEVEL_API
                bool "API"
            config APPL_TRACE_LEVEL_EVENT
                bool "EVENT"
            config APPL_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config APPL_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config APPL_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if APPL_TRACE_LEVEL_NONE
            default 1 if APPL_TRACE_LEVEL_ERROR
            default 2 if APPL_TRACE_LEVEL_WARNING
            default 3 if APPL_TRACE_LEVEL_API
            default 4 if APPL_TRACE_LEVEL_EVENT
            default 5 if APPL_TRACE_LEVEL_DEBUG
            default 6 if APPL_TRACE_LEVEL_VERBOSE
            default 2

        choice GATT_INITIAL_TRACE_LEVEL
            prompt "GATT layer"
            default GATT_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for GATT layer

            config GATT_TRACE_LEVEL_NONE
                bool "NONE"
            config GATT_TRACE_LEVEL_ERROR
                bool "ERROR"
            config GATT_TRACE_LEVEL_WARNING
                bool "WARNING"
            config GATT_TRACE_LEVEL_API
                bool "API"
            config GATT_TRACE_LEVEL_EVENT
                bool "EVENT"
            config GATT_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config GATT_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config GATT_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if GATT_TRACE_LEVEL_NONE
            default 1 if GATT_TRACE_LEVEL_ERROR
            default 2 if GATT_TRACE_LEVEL_WARNING
            default 3 if GATT_TRACE_LEVEL_API
            default 4 if GATT_TRACE_LEVEL_EVENT
            default 5 if GATT_TRACE_LEVEL_DEBUG
            default 6 if GATT_TRACE_LEVEL_VERBOSE
            default 2

        choice SMP_INITIAL_TRACE_LEVEL
            prompt "SMP layer"
            default SMP_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for SMP layer

            config SMP_TRACE_LEVEL_NONE
                bool "NONE"
            config SMP_TRACE_LEVEL_ERROR
                bool "ERROR"
            config SMP_TRACE_LEVEL_WARNING
                bool "WARNING"
            config SMP_TRACE_LEVEL_API
                bool "API"
            config SMP_TRACE_LEVEL_EVENT
                bool "EVENT"
            config SMP_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config SMP_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config SMP_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if SMP_TRACE_LEVEL_NONE
            default 1 if SMP_TRACE_LEVEL_ERROR
            default 2 if SMP_TRACE_LEVEL_WARNING
            default 3 if SMP_TRACE_LEVEL_API
            default 4 if SMP_TRACE_LEVEL_EVENT
            default 5 if SMP_TRACE_LEVEL_DEBUG
            default 6 if SMP_TRACE_LEVEL_VERBOSE
            default 2

        choice BTIF_INITIAL_TRACE_LEVEL
            prompt "BTIF layer"
            default BTIF_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for BTIF layer

            config BTIF_TRACE_LEVEL_NONE
                bool "NONE"
            config BTIF_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BTIF_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BTIF_TRACE_LEVEL_API
                bool "API"
            config BTIF_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BTIF_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BTIF_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BTIF_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if BTIF_TRACE_LEVEL_NONE
            default 1 if BTIF_TRACE_LEVEL_ERROR
            default 2 if BTIF_TRACE_LEVEL_WARNING
            default 3 if BTIF_TRACE_LEVEL_API
            default 4 if BTIF_TRACE_LEVEL_EVENT
            default 5 if BTIF_TRACE_LEVEL_DEBUG
            default 6 if BTIF_TRACE_LEVEL_VERBOSE
            default 2

        choice BTC_INITIAL_TRACE_LEVEL
            prompt "BTC layer"
            default BTC_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for BTC layer

            config BTC_TRACE_LEVEL_NONE
                bool "NONE"
            config BTC_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BTC_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BTC_TRACE_LEVEL_API
                bool "API"
            config BTC_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BTC_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BTC_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BTC_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if BTC_TRACE_LEVEL_NONE
            default 1 if BTC_TRACE_LEVEL_ERROR
            default 2 if BTC_TRACE_LEVEL_WARNING
            default 3 if BTC_TRACE_LEVEL_API
            default 4 if BTC_TRACE_LEVEL_EVENT
            default 5 if BTC_TRACE_LEVEL_DEBUG
            default 6 if BTC_TRACE_LEVEL_VERBOSE
            default 2

        choice OSI_INITIAL_TRACE_LEVEL
            prompt "OSI layer"
            default OSI_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for OSI layer

            config OSI_TRACE_LEVEL_NONE
                bool "NONE"
            config OSI_TRACE_LEVEL_ERROR
                bool "ERROR"
            config OSI_TRACE_LEVEL_WARNING
                bool "WARNING"
            config OSI_TRACE_LEVEL_API
                bool "API"
            config OSI_TRACE_LEVEL_EVENT
                bool "EVENT"
            config OSI_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config OSI_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config OSI_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if OSI_TRACE_LEVEL_NONE
            default 1 if OSI_TRACE_LEVEL_ERROR
            default 2 if OSI_TRACE_LEVEL_WARNING
            default 3 if OSI_TRACE_LEVEL_API
            default 4 if OSI_TRACE_LEVEL_EVENT
            default 5 if OSI_TRACE_LEVEL_DEBUG
            default 6 if OSI_TRACE_LEVEL_VERBOSE
            default 2

        choice BLUFI_INITIAL_TRACE_LEVEL
            prompt "BLUFI layer"
            default BLUFI_TRACE_LEVEL_WARNING
            depends on BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for BLUFI layer

            config BLUFI_TRACE_LEVEL_NONE
                bool "NONE"
            config BLUFI_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BLUFI_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BLUFI_TRACE_LEVEL_API
                bool "API"
            config BLUFI_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BLUFI_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BLUFI_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BLUFI_INITIAL_TRACE_LEVEL
            int
            depends on BLUEDROID_ENABLED
            default 0 if BLUFI_TRACE_LEVEL_NONE
            default 1 if BLUFI_TRACE_LEVEL_ERROR
            default 2 if BLUFI_TRACE_LEVEL_WARNING
            default 3 if BLUFI_TRACE_LEVEL_API
            default 4 if BLUFI_TRACE_LEVEL_EVENT
            default 5 if BLUFI_TRACE_LEVEL_DEBUG
            default 6 if BLUFI_TRACE_LEVEL_VERBOSE
            default 2

    endmenu #BT DEBUG LOG LEVEL


    config BT_ACL_CONNECTIONS
        int "BT/BLE MAX ACL CONNECTIONS(1~7)"
        depends on BLUEDROID_ENABLED
        range 1 7
        default 4
        help
            Maximum BT/BLE connection count

    config BT_ALLOCATION_FROM_SPIRAM_FIRST
        bool "BT/BLE will first malloc the memory from the PSRAM"
        depends on BLUEDROID_ENABLED
        default n
        help
            This select can save the internal RAM if there have the PSRAM

    config BT_BLE_DYNAMIC_ENV_MEMORY
        bool "Use dynamic memory allocation in BT/BLE stack"
        depends on BLUEDROID_ENABLED
        default n
        help
            This select can make the allocation of memory will become more flexible

    config BLE_HOST_QUEUE_CONGESTION_CHECK
        bool "BLE queue congestion check"
        depends on BLUEDROID_ENABLED
        default n
        help
            When scanning and scan duplicate is not enabled, if there are a lot of adv packets around or application
            layer handling adv packets is slow, it will cause the controller memory to run out. if enabled, adv
            packets will be lost when host queue is congested.

    config SMP_ENABLE
        bool
        depends on BLUEDROID_ENABLED
        default CLASSIC_BT_ENABLED || BLE_SMP_ENABLE

    config BLE_ACTIVE_SCAN_REPORT_ADV_SCAN_RSP_INDIVIDUALLY
        bool "Report adv data and scan response individually when BLE active scan"
        depends on BLUEDROID_ENABLED && (BTDM_CONTROLLER_MODE_BTDM || BTDM_CONTROLLER_MODE_BLE_ONLY)
        default n
        help
            Originally, when doing BLE active scan, Bluedroid will not report adv to application layer
            until receive scan response. This option is used to disable the behavior. When enable this option,
            Bluedroid will report adv data or scan response to application layer immediately.

            # Memory reserved at start of DRAM for Bluetooth stack
    config BT_RESERVE_DRAM
        hex
        default 0xdb5c if BT_ENABLED
        default 0

endmenu

# Kconfig - Bluetooth Mesh configuration options

#
# Copyright (c) 2017 Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0
#

menuconfig BT_MESH
	bool "Bluetooth Mesh support"
	select TINYCRYPT
	select TINYCRYPT_AES
	select TINYCRYPT_AES_CMAC
	help
	  This option enables Bluetooth Mesh support. The specific
	  features that are available may depend on other features
	  that have been enabled in the stack, such as GATT support.

if BT_MESH

config BT_MESH_NODE
    bool "Support for BLE Mesh Node"
    help
      Enable the device to be provisioned into a node

config BT_MESH_PROVISIONER
    bool "Support for BLE Mesh Provisioner"
    help
      Enable the device to be a provisioner

if BT_MESH_PROVISIONER

config BT_MESH_UNPROV_DEV_ADD
    int "Maximum number of unprovisioned devices can be added to device queue"
    default 20
    range 1 100
    help
      This option specifies how may devices can be added to device queue waiting
      for been provisioned.

config BT_MESH_MAX_STORED_NODES
    int "Maximum number of nodes whose information can be stored"
    default 20
    range 1 1000
    help
      This option specifies the maximum number of nodes whose information can be
      stored by a provisioner in its upper layer.

config BT_MESH_MAX_PROV_NODES
    int "Maximum number of devices that can be provisioned by provisioner"
    default 20
    range 1 100
    help
      This option specifies how many devices can be provisioned by
      provisioner.

if BT_MESH_PB_ADV
config BT_MESH_PBA_SAME_TIME
    int "Maximum number of PB-ADV running at the same time by provisioner"
    default 10
    range 1 30
    help
      This option specifies how many devices can be provisioned at the same
      time using PB-ADV.
endif # BT_MESH_PB_ADV

if BT_MESH_PB_GATT
config BT_MESH_PBG_SAME_TIME
    int "Maximum number of PB-GATT running at the same time by provisioner"
    default 4
    range 1 5
    help
      This option specifies how many devices can be provisioned at the same
      time using PB-GATT.
endif # BT_MESH_PB_GATT

config BT_MESH_PROVISIONER_SUBNET_COUNT
    int "Maximum number of mesh subnets can be created by provisioner"
    default 3
    range 1 4096
    help
      This option specifies how many subnets a provisioner can create
      per network

config BT_MESH_PROVISIONER_APP_KEY_COUNT
    int "Maximum number of application keys can be owned by provisioner"
    default 9
    range 1 4096
    help
      This option specifies how many application keys the provisioner
      can have.

config BT_MESH_PROVISIONER_LPN_PER_FRIEND
    int "Maximum number of low power nodes per friend node stored by provisioner"
    default 3
    range 1 10
    help
      Number of low-power nodes. The information can be obtained by
      provisioner through the corresponding friend node.

endif # BT_MESH_PROVISIONER

# Virtual option enabled whenever Generic Provisioning layer is needed
config BT_MESH_PROV
	bool

config BT_MESH_PB_ADV
	bool "Provisioning support using the advertising bearer (PB-ADV)"
	select BT_MESH_PROV
	default y
	help
	  Enable this option to allow the device to be provisioned over
	  the advertising bearer.
	  
config NET_BUF_POOL_USAGE
    bool "net buffer pool usage"
	select BT_MESH_PROV
	default n
	help
	  Enable this macro to used the mesh buffer pool usage

# Virtual option enabled whenever any Proxy protocol is needed
config BT_MESH_PROXY
	bool

config BT_MESH_PB_GATT
	bool "Provisioning support using GATT (PB-GATT)"
	select BT_MESH_PROXY
	select BT_MESH_PROV
	help
	  Enable this option to allow the device to be provisioned over
	  GATT.

config BT_MESH_GATT_PROXY
	bool "GATT Proxy Service"
	select BT_MESH_PROXY
	help
	  This option enables support for the Mesh GATT Proxy Service,
	  i.e. the ability to act as a proxy between a Mesh GATT Client
	  and a Mesh network.

config BT_MESH_NODE_ID_TIMEOUT
	int "Node Identity advertising timeout"
	depends on BT_MESH_GATT_PROXY
	range 1 60
	default 60
	help
	  This option determines for how long the local node advertises
	  using Node Identity. The given value is in seconds. The
	  specification limits this to 60 seconds, and implies that to
	  be the appropriate value as well, so just leaving this as the
	  default is the safest option.

if BT_MESH_PROXY

config BT_MESH_PROXY_FILTER_SIZE
	int "Maximum number of filter entries per Proxy Client"
	default 1
	default 3 if BT_MESH_GATT_PROXY
	range 1 32767
	help
	  This option specifies how many Proxy Filter entries the local
	  node supports.

endif # BT_MESH_PROXY

config BT_MESH_SELF_TEST
	bool "Perform self-tests"
	help
	  This option adds extra self-tests which are run every time
	  mesh networking is initialized.

config BT_MESH_IV_UPDATE_TEST
	bool "Test the IV Update Procedure"
	help
	  This option removes the 96 hour limit of the IV Update
	  Procedure and lets the state be changed at any time.

config BT_MESH_SUBNET_COUNT
	int "Maximum number of mesh subnets per network"
	default 1
	range 1 4096
	help
	  This option specifies how many subnets a Mesh network can
	  participate in at the same time.

config BT_MESH_APP_KEY_COUNT
	int "Maximum number of application keys per network"
	default 1
	range 1 4096
	help
	  This option specifies how many application keys the device can
	  store per network.

config BT_MESH_MODEL_KEY_COUNT
	int "Maximum number of application keys per model"
	default 1
	range 1 4096
	help
	  This option specifies how many application keys each model can
	  at most be bound to.

config BT_MESH_MODEL_GROUP_COUNT
	int "Maximum number of group address subscriptions per model"
	default 1
	range 1 4096
	help
	  This option specifies how many group addresses each model can
	  at most be subscribed to.

config BT_MESH_LABEL_COUNT
	int "Maximum number of Label UUIDs used for Virtual Addresses"
	default 1
	range 0 4096
	help
	  This option specifies how many Label UUIDs can be stored.

config BT_MESH_CRPL
	int "Maximum capacity of the replay protection list"
	default 10
	range 2 65535
	help
	  This options specifies the maximum capacity of the replay
	  protection list. This option is similar to the network message
	  cache size, but has a different purpose.

config BT_MESH_MSG_CACHE_SIZE
	int "Network message cache size"
	default 10
	range 2 65535
	help
	  Number of messages that are cached for the network. This helps
	  prevent unnecessary decryption operations and unnecessary
	  relays. This option is similar to the replay protection list,
	  but has a different purpose.

config BT_MESH_ADV_BUF_COUNT
	int "Number of advertising buffers"
	default 60
	range 6 256
	help
	  Number of advertising buffers available. The transport layer
	  reserves ADV_BUF_COUNT - 3 buffers for outgoing segments. The
	  maximum outgoing SDU size is 12 times this number (out of which
	  4 or 8 bytes is used for the Transport Layer MIC). For
	  example, 5 segments means the maximum SDU size is 60 bytes,
	  which leaves 56 bytes for application layer data using a
	  4-byte MIC and 52 bytes using an 8-byte MIC.

config BT_MESH_TX_SEG_MSG_COUNT
	int "Maximum number of simultaneous outgoing segmented messages"
	default 1
	range 1 BT_MESH_ADV_BUF_COUNT
	help
	  Maximum number of simultaneous outgoing multi-segment and/or
	  reliable messages.

config BT_MESH_RX_SEG_MSG_COUNT
	int "Maximum number of simultaneous incoming segmented messages"
	default 1
	range 1 255
	help
	  Maximum number of simultaneous incoming multi-segment and/or
	  reliable messages.

config BT_MESH_RX_SDU_MAX
	int "Maximum incoming Upper Transport Access PDU length"
	default 384
	range 36 384
	help
	  Maximum incoming Upper Transport Access PDU length. Leave this
	  to the default value, unless you really need to optimize memory
	  usage.

config BT_MESH_RELAY
	bool "Relay support"
	help
	  Support for acting as a Mesh Relay Node.

config BT_MESH_LOW_POWER
	bool "Support for Low Power features"
	help
	  Enable this option to be able to act as a Low Power Node.

if BT_MESH_LOW_POWER

config BT_MESH_LPN_ESTABLISHMENT
	bool "Perform Friendship establishment using low power"
	default y
	help
	  Perform the Friendship establishment using low power, with
	  the help of a reduced scan duty cycle. The downside of this
	  is that the node may miss out on messages intended for it
	  until it has successfully set up Friendship with a Friend
	  node.

config BT_MESH_LPN_AUTO
	bool "Automatically start looking for Friend nodes once provisioned"
	default y
	help
	  Automatically enable LPN functionality once provisioned and start
	  looking for Friend nodes. If this option is disabled LPN mode
	  needs to be manually enabled by calling bt_mesh_lpn_set(true).

config BT_MESH_LPN_AUTO_TIMEOUT
	int "Time from last received message before going to LPN mode"
	default 15
	range 0 3600
	depends on BT_MESH_LPN_AUTO
	help
	  Time in seconds from the last received message, that the node
	  will wait before starting to look for Friend nodes.

config BT_MESH_LPN_RETRY_TIMEOUT
	int "Retry timeout for Friend requests"
	default 8
	range 1 3600
	help
	  Time in seconds between Friend Requests, if a previous Friend
	  Request did not receive any acceptable Friend Offers.

config BT_MESH_LPN_RSSI_FACTOR
	int "RSSIFactor, used in the Friend Offer Delay calculation"
	range 0 3
	default 0
	help
	  The contribution of the RSSI measured by the Friend node used
	  in Friend Offer Delay calculations. 0 = 1, 1 = 1.5, 2 = 2, 3 = 2.5.

config BT_MESH_LPN_RECV_WIN_FACTOR
	int "ReceiveWindowFactor, used in the Friend Offer Delay calculation"
	range 0 3
	default 0
	help
	  The contribution of the supported Receive Window used in
	  Friend Offer Delay calculations. 0 = 1, 1 = 1.5, 2 = 2, 3 = 2.5.

config BT_MESH_LPN_MIN_QUEUE_SIZE
	int "Minimum size of acceptable friend queue (MinQueueSizeLog)"
	range 1 7
	default 1
	help
	  The MinQueueSizeLog field is defined as log_2(N), where N is
	  the minimum number of maximum size Lower Transport PDUs that
	  the Friend node can store in its Friend Queue. As an example,
	  MinQueueSizeLog value 1 gives N = 2, and value 7 gives N = 128.

config BT_MESH_LPN_RECV_DELAY
	int "Receive delay requested by the local node"
	range 10 255
	default 100
	help
	  The ReceiveDelay is the time between the Low Power node
	  sending a request and listening for a response. This delay
	  allows the Friend node time to prepare the response. The value
	  is in units of milliseconds.

config BT_MESH_LPN_POLL_TIMEOUT
	int "The value of the PollTimeout timer"
	range 10 244735
	default 300
	help
	  PollTimeout timer is used to measure time between two
	  consecutive requests sent by the Low Power node. If no
	  requests are received by the Friend node before the
	  PollTimeout timer expires, then the friendship is considered
	  terminated. The value is in units of 100 milliseconds, so e.g.
	  a value of 300 means 3 seconds.

config BT_MESH_LPN_INIT_POLL_TIMEOUT
	int "The starting value of the PollTimeout timer"
	range 10 BT_MESH_LPN_POLL_TIMEOUT
	default BT_MESH_LPN_POLL_TIMEOUT
	help
	  The initial value of the PollTimeout timer when Friendship
	  gets established for the first time. After this the timeout
	  will gradually grow toward the actual PollTimeout, doubling
	  in value for each iteration. The value is in units of 100
	  milliseconds, so e.g. a value of 300 means 30 seconds.

config BT_MESH_LPN_SCAN_LATENCY
	int "Latency for enabling scanning"
	range 0 50
	default 10
	help
	  Latency in milliseconds that it takes to enable scanning. This
	  is in practice how much time in advance before the Receive Window
	  that scanning is requested to be enabled.

config BT_MESH_LPN_GROUPS
	int "Number of groups the LPN can subscribe to"
	range 0 16384
	default 8
	help
	  Maximum number of groups that the LPN can subscribe to.
endif # BT_MESH_LOW_POWER

config BT_MESH_FRIEND
	bool "Support for acting as a Friend Node"
	help
	  Enable this option to be able to act as a Friend Node.

if BT_MESH_FRIEND

config BT_MESH_FRIEND_RECV_WIN
	int "Friend Receive Window"
	range 1 255
	default 255
	help
	  Receive Window in milliseconds supported by the Friend node.

config BT_MESH_FRIEND_QUEUE_SIZE
	int "Minimum number of buffers supported per Friend Queue"
	range 2 65536
	default 16
	help
	  Minimum number of buffers available to be stored for each
	  local Friend Queue.

config BT_MESH_FRIEND_SUB_LIST_SIZE
	int "Friend Subscription List Size"
	range 0 1023
	default 3
	help
	  Size of the Subscription List that can be supported by a
	  Friend node for a Low Power node.

config BT_MESH_FRIEND_LPN_COUNT
	int "Number of supported LPN nodes"
	range 1 1000
	default 2
	help
	  Number of Low Power Nodes the Friend can have a Friendship
	  with simultaneously.

config BT_MESH_FRIEND_SEG_RX
	int "Number of incomplete segment lists per LPN"
	range 1 1000
	default 1
	help
	  Number of incomplete segment lists that we track for each LPN
	  that we are Friends for. In other words, this determines how
	  many elements we can simultaneously be receiving segmented
	  messages from when the messages are going into the Friend queue.

endif # BT_MESH_FRIEND

config BT_MESH_NO_LOG
    bool "Disable BT MESH debug logs (minimize bin size)"
    depends on BT_MESH
    default n
    help
        This select can save the rodata code size

menu "BT DEBUG LOG LEVEL"
    depends on BT_MESH && !BT_MESH_NO_LOG
		
choice BT_MESH_STACK_INITIAL_TRACE_LEVEL
    prompt "BT_MESH_STACK"
    default BT_MESH_TRACE_LEVEL_WARNING
    depends on BT_MESH && !BT_MESH_NO_LOG
    help
        Define BT trace level for bt mesh stack

config BT_MESH_TRACE_LEVEL_NONE
    bool "NONE"
config BT_MESH_TRACE_LEVEL_ERROR
    bool "ERROR"
config BT_MESH_TRACE_LEVEL_WARNING
    bool "WARNING"
config BT_MESH_TRACE_LEVEL_INFO
    bool "INFO"
config BT_MESH_TRACE_LEVEL_DEBUG
    bool "DEBUG"
config BT_MESH_TRACE_LEVEL_VERBOSE
    bool "VERBOSE"
endchoice

config BT_MESH_STACK_INITIAL_TRACE_LEVEL
    int
    depends on BT_MESH
    default 0 if BT_MESH_TRACE_LEVEL_NONE
    default 1 if BT_MESH_TRACE_LEVEL_ERROR
    default 2 if BT_MESH_TRACE_LEVEL_WARNING
    default 3 if BT_MESH_TRACE_LEVEL_INFO
    default 4 if BT_MESH_TRACE_LEVEL_DEBUG
    default 5 if BT_MESH_TRACE_LEVEL_VERBOSE
    default 2

endmenu #BT NET NUFFER DEBUG LOG LEVEL

menu "BT NET NUFFER DEBUG LOG LEVEL"
    depends on BT_MESH && !BT_MESH_NO_LOG

choice BT_MESH_NET_BUF_INITIAL_TRACE_LEVEL
    prompt "BT_MESH_STACK"
    default BT_MESH_NET_BUF_TRACE_LEVEL_WARNING
    depends on BT_MESH && !BT_MESH_NO_LOG
    help
        Define BT trace level for bt mesh network buffer alloc debug

config BT_MESH_NET_BUF_TRACE_LEVEL_NONE
    bool "NONE"
config BT_MESH_NET_BUF_TRACE_LEVEL_ERROR
    bool "ERROR"
config BT_MESH_NET_BUF_TRACE_LEVEL_WARNING
    bool "WARNING"
config BT_MESH_NET_BUF_TRACE_LEVEL_INFO
    bool "INFO"
config BT_MESH_NET_BUF_TRACE_LEVEL_DEBUG
    bool "DEBUG"
config BT_MESH_NET_BUF_TRACE_LEVEL_VERBOSE
    bool "VERBOSE"
endchoice

config BT_MESH_NET_BUF_INITIAL_TRACE_LEVEL
    int
    depends on BT_MESH
    default 0 if BT_MESH_NET_BUF_TRACE_LEVEL_NONE
    default 1 if BT_MESH_NET_BUF_TRACE_LEVEL_ERROR
    default 2 if BT_MESH_NET_BUF_TRACE_LEVEL_WARNING
    default 3 if BT_MESH_NET_BUF_TRACE_LEVEL_INFO
    default 4 if BT_MESH_NET_BUF_TRACE_LEVEL_DEBUG
    default 5 if BT_MESH_NET_BUF_TRACE_LEVEL_VERBOSE
    default 2

endmenu #BT DEBUG NET BUF LOG LEVEL

config BT_MESH_IRQ_LOCK
    bool "Used the IRQ lock instead of task lock"
	help
	  In BLE Mesh, in order to improve the real-time requirements of bt controller, we use task lock to replace IRQ lock.

config BT_MESH_CLIENT_MSG_TIMEOUT
    int "Timeout(ms) for client message response"
    range 100 1200000
    default 4000
    help
      Timeout value used by the node to get response for the message sent.

config BT_MESH_CFG_CLI
	bool "Support for Configuration Client Model"
	help
	  Enable support for the configuration client model.

config BT_MESH_HEALTH_CLI
	bool "Support for Health Client Model"
	help
	  Enable support for the health client model.

config BT_MESH_GENERIC_ONOFF_CLI
	bool "Support for Generic OnOff Client Model"
	help
	  Enable support for the Generic OnOff client model.

config BT_MESH_GENERIC_LEVEL_CLI
	bool "Support for Generic Level Client Model"
	help
	  Enable support for the Generic Level client model.

config BT_MESH_GENERIC_DEF_TRANS_TIME_CLI
	bool "Support for Generic Default Transition Time Client Model"
	help
	  Enable support for the Generic Default Transition Time client model.

config BT_MESH_GENERIC_POWER_ONOFF_CLI
	bool "Support for Generic Power Onoff Client Model"
	help
	  Enable support for the Generic Power Onoff client model.

config BT_MESH_GENERIC_POWER_LEVEL_CLI
	bool "Support for Generic Power Level Client Model"
	help
	  Enable support for the Generic Power Level client model.

config BT_MESH_GENERIC_BATTERY_CLI
	bool "Support for Generic Battery Client Model"
	help
	  Enable support for the Generic Battery client model.

config BT_MESH_GENERIC_LOCATION_CLI
	bool "Support for Generic Location Client Model"
	help
	  Enable support for the Generic Location client model.

config BT_MESH_GENERIC_PROPERTY_CLI
	bool "Support for Generic Property Client Model"
	help
	  Enable support for the Generic Property client model.

config BT_MESH_SENSOR_CLI
	bool "Support for Sensor Client Model"
	help
	  Enable support for the Sensor client model.

config BT_MESH_SCENE_CLI
	bool "Support for Scene Client Model"
	help
	  Enable support for the Scene client model.

config BT_MESH_LIGHT_LIGHTNESS_CLI
	bool "Support for Light Lightness Client Model"
	help
	  Enable support for the Light Lightness client model.

config BT_MESH_LIGHT_CTL_CLI
	bool "Support for Light CTL Client Model"
	help
	  Enable support for the Light CTL client model.

config BT_MESH_LIGHT_HSL_CLI
	bool "Support for Light HSL Client Model"
	help
	  Enable support for the Light HSL client model.

config BT_MESH_SHELL
	bool "Enable Bluetooth Mesh shell"
	select CONSOLE_SHELL
	depends on BT_MESH_CFG_CLI
	depends on BT_MESH_HEALTH_CLI
	help
	  Activate shell module that provides Bluetooth Mesh commands to
	  the console.



config BT_MESH_DEBUG
	bool "Enable debug logs"
	depends on BT_DEBUG
	help
	  Use this option to enable debug logs for the Bluetooth
	  Mesh functionality.

if BT_MESH_DEBUG

config BT_MESH_DEBUG_NET
	bool "Network layer debug"
	help
	  Use this option to enable Network layer debug logs for the
	  Bluetooth Mesh functionality.

config BT_MESH_DEBUG_TRANS
	bool "Transport layer debug"
	help
	  Use this option to enable Transport layer debug logs for the
	  Bluetooth Mesh functionality.

config BT_MESH_DEBUG_BEACON
	bool "Beacon debug"
	help
	  Use this option to enable Beacon-related debug logs for the
	  Bluetooth Mesh functionality.

config BT_MESH_DEBUG_CRYPTO
	bool "Crypto debug"
	help
	  Use this option to enable cryptographic debug logs for the
	  Bluetooth Mesh functionality.

config BT_MESH_DEBUG_PROV
	bool "Provisioning debug"
	help
	  Use this option to enable Provisioning debug logs for the
	  Bluetooth Mesh functionality.

config BT_MESH_DEBUG_ACCESS
	bool "Access layer debug"
	help
	  Use this option to enable Access layer and device composition
	  related debug logs for Bluetooth Mesh.

config BT_MESH_DEBUG_MODEL
	bool "Foundation model debug"
	help
	  Use this option to enable debug logs for the Foundation
	  Models.

config BT_MESH_DEBUG_ADV
	bool "Advertising debug"
	help
	  Use this option to enable advertising debug logs for
	  the Bluetooth Mesh functionality.

config BT_MESH_DEBUG_LOW_POWER
	bool "Low Power debug"
	help
	  Use this option to enable Low Power debug logs for the
	  Bluetooth Mesh functionality.

config BT_MESH_DEBUG_FRIEND
	bool "Friend debug"
	help
	  Use this option to enable Friend debug logs for the
	  Bluetooth Mesh functionality.

config BT_MESH_DEBUG_PROXY
	bool "Proxy debug"
	depends on BT_MESH_PROXY
	help
	  Use this option to enable Proxy protocol debug logs.

endif # BT_MESH_DEBUG



endif # BT_MESH
